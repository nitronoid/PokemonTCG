
dealDamage
------------------------
Think this could just be one function with defaults:    
void dealDamage(
    const int _ammount, 
    const PLAYER _target = PLAYER::ENEMY,
    const unsigned _pokemonIndex = 0
    )
Multiplication should be handled when the function is called,
e.g. dealDamage(20 * flipCoin(2));
We could use index 0 for active, 1-5 for the benched pokemon.
Possibly use your split function for internals.


applyCondition
----------------------------
Conditions could be applied to pokemon on the bench, e.g. poisoning them.
Need to take this into account with a param, probably similar to the above.


quantity functions
-----------------------------
I feel like we will just allow the players to view eachothers board slots?
They could look for whatever they want that way.
We wouldn't want to implement a function for every individual search case.


discardCard
------------------------------
Whats the use case for this? can the player decide to discard a card at will?
Otherwise if it's a forced choice could we not handle this with the moveCard function,
i.e move from ORIGIN to the discard pile?


futureDamage
------------------------------
This seems like a complex issue so we should discuss as a team.
Could possibly store this in the board slot with a member, and clear at the end of the turn,
however this would only work for one turn ahead.


noRetreat
------------------------------
When does this effect wear off?


cardAttatched
------------------------------
Again we will probably offer read only access to opponents board slots,
so they can query this type of info without us needing specialised functions.

view
------------------------------
same point as above


matchPokeType
------------------------------
Who is calling this? The description says it's for applying weakness/resistance,
if so it will be internal and we will have access to the types.


onPlayTrigger
-------------------------------
We will probably check all active abilities when ever a card is played.
The game knows when this happens as the player will call playCard.
