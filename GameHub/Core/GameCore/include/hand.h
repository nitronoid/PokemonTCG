#ifndef HAND_H
#define HAND_H
#include "cardpile.h"
#include <vector>

class Hand : public CardPile
{
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief default ctor for Hand
  //----------------------------------------------------------------------------------------------------------------------
  Hand() = default;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief copy ctor
  //----------------------------------------------------------------------------------------------------------------------
  Hand (const Hand &_original);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief assignment op for copy ctor for Hand
  //----------------------------------------------------------------------------------------------------------------------
  Hand& operator=(const Hand &);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ctor for Hand
  //----------------------------------------------------------------------------------------------------------------------
  Hand(std::vector<std::unique_ptr<Card>>&& _cards) :
    m_cards(std::move(_cards))
  {}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method for putting a card to hand
  /// @param [in] _card a card to put
  /// @return none
  //----------------------------------------------------------------------------------------------------------------------
  virtual void put(std::unique_ptr<Card> &&_card) override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method for taking a card from hand
  /// @param [in] _index index of card to take
  /// @return a card taken from hand
  //----------------------------------------------------------------------------------------------------------------------
  virtual std::unique_ptr<Card> take(const size_t _index) override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief getter method for viewing a card
  /// @param [in] _index index of card to view
  /// @return a card
  //----------------------------------------------------------------------------------------------------------------------
  virtual Card* cardAt(const size_t _index) override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief getter method for viewing the hand
  /// @return vector of cards
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<std::unique_ptr<Card>> view() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief getter method for retrieving the number of cards contained in the hand
  /// @return number
  //----------------------------------------------------------------------------------------------------------------------
  virtual size_t numCards() const override;
private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief cards owned by the hand
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<std::unique_ptr<Card>> m_cards;
};

#endif // HAND_H
