#ifndef POKEMONCARD_H
#define POKEMONCARD_H

#include "card.h"
#include "attack.h"
#include <vector>
#include <unordered_set>

class PokemonCard : public Card
{
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief default copy ctor
  //----------------------------------------------------------------------------------------------------------------------
  PokemonCard(const PokemonCard&) = default;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief copy assignment operator for PokemonCard
  //----------------------------------------------------------------------------------------------------------------------
  PokemonCard& operator=(const PokemonCard&) = default;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ctor for PokemonCard
  //----------------------------------------------------------------------------------------------------------------------
  PokemonCard(
      const unsigned _id,
      const std::string &_name,
      const Ability & _ability,
      std::vector<Attack> && _attacks,
      const PTCG::TYPE _type,
      const PTCG::TYPE _weakness,
      const PTCG::TYPE _resistance,
      const int _hp,
      const unsigned _retreatCost,
      const unsigned _stage,
      const std::string _preEvo = ""
      ) :
    Card(_id, _name, _ability),
    m_type(_type),
    m_weakness(_weakness),
    m_resistance(_resistance),
    m_attacks(_attacks),
    m_preEvolution(_preEvo),
    m_hp(_hp),
    m_retreatCost(_retreatCost),
    m_stage(_stage)
  {}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief default dtor
  //----------------------------------------------------------------------------------------------------------------------
  ~PokemonCard() = default;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief play status validation
  /// @param [io] reference parent game
  /// @return true/false
  //----------------------------------------------------------------------------------------------------------------------
  virtual bool canPlay(Game&io_game) const override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief play current card
  /// @param [io] reference parent game
  /// @param [in] target index
  //----------------------------------------------------------------------------------------------------------------------
  virtual void playCard(Game&_game, const size_t _index) override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief attack status validation
  /// @param [io] reference parent game
  /// @param [in] attack id
  /// @param [in] attack energies
  /// @return true/false
  //----------------------------------------------------------------------------------------------------------------------
  bool canAttack(Game &_game, const size_t _attackID, std::unordered_multiset<PTCG::TYPE> _attachedEnergy);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method for cloning the card
  /// @return a pointer to the card
  //----------------------------------------------------------------------------------------------------------------------
  virtual Card* clone() override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief perform an attack
  /// @param [in] attack index
  /// @param [io] reference parent game
  //----------------------------------------------------------------------------------------------------------------------
  void attack(const unsigned &_attackIndex, Game& _game);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get card type
  /// @return type enum
  //----------------------------------------------------------------------------------------------------------------------
  virtual PTCG::CARD cardType() const override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get pre evolution
  /// @return string name of pre evolution pokemon
  //----------------------------------------------------------------------------------------------------------------------
  std::string preEvolution() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get pokemon type
  /// @return pokemon type enum
  //----------------------------------------------------------------------------------------------------------------------
  PTCG::TYPE type() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get weakness type
  /// @return pokemon type enum (weakness)
  //----------------------------------------------------------------------------------------------------------------------
  PTCG::TYPE weakness() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get resistance type
  /// @return pokemon type enum (resistance)
  //----------------------------------------------------------------------------------------------------------------------
  PTCG::TYPE resistance() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get hp
  /// @return an int number
  //----------------------------------------------------------------------------------------------------------------------
  int hp() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get retreat cost
  /// @return an unsigned integer value
  //----------------------------------------------------------------------------------------------------------------------
  unsigned retreatCost() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get stage of current pokemon
  /// @return an unsigned integer value
  //----------------------------------------------------------------------------------------------------------------------
  unsigned stage() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get attacks of this pokemon
  /// @return vector of attacks
  //----------------------------------------------------------------------------------------------------------------------
  const std::vector<Attack>& attacks() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get the number of attacks
  /// @return the number of attacks
  //----------------------------------------------------------------------------------------------------------------------
  unsigned attackNum() const;
private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief pokemon type
  //----------------------------------------------------------------------------------------------------------------------
  PTCG::TYPE  m_type;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief weakness pokemon type
  //----------------------------------------------------------------------------------------------------------------------
  PTCG::TYPE  m_weakness;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief resistance pokemon type
  //----------------------------------------------------------------------------------------------------------------------
  PTCG::TYPE  m_resistance;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief all attacks of this pokemon
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<Attack> m_attacks;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief pre-evolution pokemon name
  //----------------------------------------------------------------------------------------------------------------------
  std::string m_preEvolution;  //ADD TO CONSTRUCTOR
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief current health points
  //----------------------------------------------------------------------------------------------------------------------
  int m_hp;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief retreat cost
  //----------------------------------------------------------------------------------------------------------------------
  unsigned m_retreatCost;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief current evolution stage
  //----------------------------------------------------------------------------------------------------------------------
  unsigned m_stage;
};

#endif // POKEMONCARD_H
