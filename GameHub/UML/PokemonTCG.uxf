<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <help_text>goTeam</help_text>
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1010</x>
      <y>860</y>
      <w>570</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>*Game*
--
-m_playerOne : Player
-m_playerTwo : Player
-m_currentPlayer : Player*
-m_turn : unsigned
-m_turnPhase : PHASE
-m_canPlay : std::set&lt;CardType&gt;
--
+clone() : Game
+attack(const unsigned _index) : void
+endTurn() : void
+canPlay(Card* const _card) : bool
+onPlay(Card* const _card) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1240</x>
      <y>470</y>
      <w>350</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>*Player*
--
-m_active : BoardSlot
-m_bench : Bench
-m_prizeCards : PrizeCards
-m_hand : Hand
-m_deck : Deck
-m_discardPile : DiscardPile
-m_canRetreat : bool
--
+playCard(const unsigned _index) : void
+attack(const unsigned _index) : void
+endTurn() : void
+retreat(const unsigned _replacement) : void
+getDummyGame() : Game
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>700</x>
      <y>540</y>
      <w>530</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>*BoardSlot*
--
-m_pokemon : PokemonCard*
-m_damage : int
-m_conditions : std::unordered_set&lt;CONDITION&gt;
-m_energy : std::vector&lt;EnergyCard*&gt;
-m_tool : ToolCard*
-m_basePokemons : std::vector&lt;PokemonCard*&gt;
-m_turnPlayed : const unsigned
--
+setDamage(const int _value) : void
+addCondition(const CONDITION _condition) : void
+removeCondition(const CONDITION _condition) : void
+removeAllConditions() : void
+attachCard(Card* const _card) : void
+detachCard(Card* const _card) : void
+setPokemon(PokemonCard* const _pokemon) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>730</x>
      <y>130</y>
      <w>680</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>*/Card/*
--
-m_ID : unsigned
-m_name : std::string
-m_ability : Ability
--
#Card(const int)
+addAbility(AbilityFunc _newAbility, const PHASE _phase, const DURATION _duration) : void
+activateAbility(): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>330</y>
      <w>630</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>*PokemonCard*
--
-m_hp : const unsigned
-m_type : TYPE
-m_weakness : TYPE
-m_resistance :  TYPE
-m_retreat : int
-m_stage : int
-m_preEvolution : std::string
-m_attacks : std::unordered_map&lt;std::string, AttackFunc&gt;
-m_retreatCost : const unsigned
-m_attackRequirements : std::unordered_map&lt;std::string, std::vector&lt;TYPE&gt; &gt;
--
+PokemonCard(const PokemonCard&amp;)
+PokemonCard&amp; operator=(const PokemonCard&amp;)
+PokemonCard(const unsigned _id, const unsigned _hp, const unsigned _retreatCost, )
+addAttack(AttackFunc _newAttack, const std::vector&lt;TYPE&gt;&amp; _cost) : void
+attack(const Game&amp; _game, const size_t _index) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>670</x>
      <y>360</y>
      <w>260</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>*StadiumCard*
--
+StadiumCard(const unsigned _id)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>550</x>
      <y>270</y>
      <w>410</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>390.0;10.0;390.0;30.0;10.0;30.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>70</x>
      <y>660</y>
      <w>570</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>*EnergyCard*
--
-m_amount : const unsigned
-m_type : const TYPE
--
+EnergyCard(const unsigned _id, const unsigned _amount, const TYPE&amp; _type)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>630</x>
      <y>270</y>
      <w>330</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>310.0;10.0;310.0;30.0;20.0;30.0;20.0;400.0;10.0;400.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>810</x>
      <y>270</y>
      <w>150</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>130.0;10.0;130.0;30.0;10.0;30.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>820</x>
      <y>440</y>
      <w>260</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>*ToolCard*
--
+ToolCard(const unsigned _id)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>960</x>
      <y>360</y>
      <w>260</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>*ItemCard*
--
+ItemCard(const unsigned _id)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1140</x>
      <y>290</y>
      <w>270</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>*SupporterCard*
--
+SupporterCard(const unsigned _id)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>930</x>
      <y>270</y>
      <w>30</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;170.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>930</x>
      <y>270</y>
      <w>180</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;30.0;160.0;30.0;160.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>930</x>
      <y>270</y>
      <w>230</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;30.0;210.0;30.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>580</x>
      <y>0</y>
      <w>850</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>using AttackFunc = std::function&lt;void(const Game&amp;)&gt;
using AbilityFunc = AttackFunc
enum class TYPE {FIRE, WATER, GRASS, PSYCHIC, FIGHTING, STEEL, DRAGON, FAIRY, DARK, ELECTRIC, COLOURLESS}
enum class CONDITION {SLEEP, BURN, POISON, CONFUSED, PARALYZED}
enum class PHASE {DRAW, MAIN, ATTACK, NONE}
enum class DURATION {SINGLE, MULTIPLE, PERMANENT}
bg=#f4f38d</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>40</x>
      <y>170</y>
      <w>650</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>*Ability*
--
-m_ability : AbilityFunc
-m_abilityPhase : PHASE
-m_abilityDuration : DURATION
--
+Ability(AbilityFunc _newAbility, const PHASE _phase, const DURATION _duration) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>680</x>
      <y>200</y>
      <w>70</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>620</x>
      <y>500</y>
      <w>440</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>420.0;40.0;420.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>630</x>
      <y>540</y>
      <w>90</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>70.0;10.0;40.0;10.0;40.0;150.0;10.0;150.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1400</x>
      <y>140</y>
      <w>580</w>
      <h>490</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>530.0;470.0;560.0;470.0;560.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1150</x>
      <y>470</y>
      <w>110</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1440</x>
      <y>690</y>
      <w>30</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;170.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1630</x>
      <y>470</y>
      <w>300</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>*Bench*
--
-m_slots : std::array&lt;BoardSlot,5&gt;
--
+put(Card* const _newCard) : void
+cardAt(const unsigned _index) : Card*
+take(const unsigned _index) : Card*
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1630</x>
      <y>590</y>
      <w>300</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>*PrizeCards*
--
-m_cards :std::array&lt;Card*,6&gt;
--
+peek(const unsigned _index) : Card*
+take(const unsigned _index) : Card*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1630</x>
      <y>700</y>
      <w>300</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>*Hand*
--
-m_cards : std::vector&lt;Card*&gt;
--
+view() : std::vector&lt;Card*&gt;&amp;
+take(const unsigned _index) : Card*
+put(Card* const _newCard) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1630</x>
      <y>820</y>
      <w>300</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>*Deck*
--
-m_cards : std::vector&lt;Card*&gt;
--
+take(const unsigned _index = 0) : Card*
+put(Card* const _newCard) : void
+view() : std::vector&lt;Card*&gt;&amp;
+shuffle() : void


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1630</x>
      <y>960</y>
      <w>300</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>*DiscardPile*
--
-m_cards : std::vector&lt;Card*&gt;
--
+view() : std::vector&lt;Card*&gt;&amp;
+take(const unsigned _index) : Card*
+put(Card* const _newCard) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1110</x>
      <y>430</y>
      <w>560</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>540.0;40.0;540.0;10.0;10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1400</x>
      <y>140</y>
      <w>580</w>
      <h>620</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>530.0;600.0;560.0;600.0;560.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1400</x>
      <y>140</y>
      <w>580</w>
      <h>730</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>530.0;710.0;560.0;710.0;560.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1400</x>
      <y>140</y>
      <w>580</w>
      <h>860</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>530.0;840.0;560.0;810.0;560.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1580</x>
      <y>500</y>
      <w>70</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;50.0;40.0;50.0;40.0;10.0;50.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1580</x>
      <y>540</y>
      <w>70</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;40.0;10.0;40.0;80.0;50.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1580</x>
      <y>540</y>
      <w>70</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;40.0;10.0;40.0;200.0;50.0;200.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1580</x>
      <y>540</y>
      <w>70</w>
      <h>340</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;40.0;10.0;40.0;320.0;50.0;320.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1580</x>
      <y>540</y>
      <w>70</w>
      <h>470</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;40.0;10.0;40.0;450.0;50.0;450.0</additional_attributes>
  </element>
</diagram>
